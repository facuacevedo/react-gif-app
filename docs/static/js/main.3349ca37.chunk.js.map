{"version":3,"sources":["Components/AddCategory.js","Helpers/GetGifs.js","Components/GifGridItem.js","Components/GifGrid.js","Hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","personaje","ReactDOM","render","document","getElementById"],"mappings":"gLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,cAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACI,0BAAMC,SAbW,SAAEC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAG3BR,EAAc,CAAEE,IAEhBC,EAAc,KAElBM,QAAQC,IAAI,kBAIR,2BACIC,KAAK,OACLC,MAAQV,EACRW,SAtBc,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACzBL,QAAQC,IAAKI,GACbX,EAAeW,EAAOF,Y,uBCPjBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,0FAE6EC,UAAYH,GAFzF,sBAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAGQ,EAAIG,cAAP,aAAG,EAAYC,iBAAiBZ,QAZvB,kBAmBZM,GAnBY,4CAAH,sDCAPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEvC,OACE,yBAAKc,UAAU,0CACX,yBAAKC,IAAMf,EAAMgB,IAAI,UACrB,2BAAKN,KCFAO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAYtB,ECdwB,SAAEA,GAC1B,MAA0Bf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WACPxB,EAASC,GACRwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAKkB,EACLL,SAAS,SAGlB,CAAEpB,IAGEqB,EDJ0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,oCACI,4BAAMpB,EAAN,KAEEoB,GAAW,yCAGb,yBAAKJ,UAAU,aAEHH,EAAOJ,KAAK,SAAEC,GAAF,OACZ,kBAAC,EAAD,eACIiB,IAAQjB,EAAIC,IAGRD,UE9BnBkB,EAAe,WAGxB,MAAqC3C,mBAAS,CAAC,SAA/C,mBAAQ4C,EAAR,KAAoB7C,EAApB,KAEA,OACI,oCACI,8CAGA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEE6C,EAAWpB,KAAK,SAAAqB,GAAS,OACvB,kBAAC,EAAD,CAASH,IAAMG,EAAY9B,SAAW8B,S,MCXtDC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.3349ca37.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\nimport React, { useState } from 'react'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState(\"Hola mundo\");\r\n\r\n    const handleInputChange = ({ target }) => {\r\n        console.log( target )\r\n        setInputValue( target.value );\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault()\r\n\r\n        if( inputValue.trim().length > 2){\r\n            // VALIDACION SI LAS LO QUE RECIBE EL INPUT ES MAYOR A 2 CARACTERES, SIN ESPACIOS EN LOS EXTREMOS\r\n            // LO SETEE EN CATEGORIES Y VACIE EL CONTENIDO DE INPUTVALUE\r\n            setCategories([ inputValue ])\r\n            //CAMBIANDO LA POSICION DE CATS E INPUTVALUE, CAMBIARA EL ORDEN EN EL QUE SE IMPRIMEN EN EL DOM\r\n            setInputValue(\"\")\r\n        } \r\n        console.log(\"Submit hecho\")\r\n    }\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\" \r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired,\r\n}","import React from 'react';\r\n\r\nexport const getGifs = async ( category ) => {\r\n    //EL METODO ENCODEURI ES PARA QUE SE CODIFIQUEN LOS ESPACIOS Y SIMBOLOS\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=ddgdkPU5whV3XXIbG4gjgCb4H052ZVm1&q=${ encodeURI(  category  )}&limit=10`\r\n    const resp = await fetch(url);\r\n    //destructuring de la data para poder usarla como funcion y usar el .map\r\n    const { data } = await resp.json();\r\n    \r\n    //una funcion que retorne un obj con los valores de la data\r\n    const gifs = data.map( img => {\r\n       return {\r\n           id: img.id,\r\n           title: img.title,\r\n           url : img.images?.downsized_medium.url\r\n           //con el \"?\" hacemos la condicion de que si vienen las imagenes, utilice el resto de valores\r\n\r\n       } \r\n    })\r\n\r\n    //COMO NO ESTA SETIMAGES, RETORNAMOS LA PROMISE PARA TRABAJAR CON LOS GIFS\r\n    return gifs;\r\n}","import React from 'react';\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\r\n  return (\r\n    <div className='card animate__animated animate__fadeIn'>\r\n        <img src={ url } alt=\"title\" />\r\n        <p>{ title }</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react'\r\nimport { getGifs } from '../Helpers/GetGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../Hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    //USAR EL SEGUNDO PARAMETRO VACIO HARA QUE SE DISPARE SOLAMENTE 1 VEZ EL USEEFFECT\r\n    \r\n    // const [images, setImages] = useState([ ]);\r\n\r\n    // useEffect( ()=>{\r\n    //     // COMO GETGIFS ES UNA PROMMISE, PODEMOS TRABAJAR CON EL RESOLVE Y HACER UN .THEN\r\n    //     getGifs( category )\r\n    //     .then( imgs => setImages( imgs ))\r\n    // }, [ category ])\r\n\r\n// AÃ‘ADIENDO CATEGORY EL USEEFFECT, HACEMOS QUE ESCUCHE ANTE CUALQUEIR CAMBIO EN LA CATEGORIA\r\n    const { data:images, loading } = useFetchGifs( category );\r\n    \r\n    return (\r\n        <>\r\n            <h3>{ category } </h3>\r\n            {/* EL OPERAOR && SIRVE COMO EL TERNARIO PERO SIN UNA OPCION ELSE, MAS SIMPLIFICADO */}\r\n            { loading && <p>Loading...</p>}\r\n\r\n            { \r\n            <div className='card-grid'>\r\n                { \r\n                        images.map( ( img ) => \r\n                        <GifGridItem \r\n                            key = { img.id }\r\n                            //ESTA ES UNA MANERA DE PASAR LAS PROPS DE FORMA INDEPENDIENTE Y LUEGO HACER DESTRUCTURING\r\n                            //EN EL COMPONENTE PADRE\r\n                            {...img}\r\n                            />\r\n                        )\r\n                    }\r\n            </div> }\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../Helpers/GetGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect( ( )=>{\r\n        getGifs( category )\r\n        .then( imgs => {\r\n            \r\n            setState({\r\n                data:imgs,\r\n                loading: false,\r\n            })\r\n        })\r\n    }, [ category])\r\n\r\n\r\n    return state;\r\n}","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./Components/AddCategory\";\r\nimport { GifGrid } from \"./Components/GifGrid\";\r\nexport const GifExpertApp = () => {\r\n    // SI NO LE PASAMOS UN ARGUMENTO A USESTATE, QUEDARA COMO UNDEFINED\r\n    // Y NOS DARA UN ERROR, PARA EVITAR ESO SI QUEREMOS QUE RECIBA UN STRING, LE PASAMOS UN STRING VACIO ''\r\n    const [ categories, setCategories] = useState([\"Goku\"]);\r\n\r\n    return(\r\n        <>\r\n            <h2>\r\n                Gif Expert App\r\n            </h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            { categories.map( personaje => \r\n                <GifGrid key={ personaje } category={ personaje }/> )\r\n                }\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}